// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UserSDK
import AdSupport
import SystemConfiguration.CaptiveNetwork
import CoreTelephony
import FirebaseCore
import FirebaseInstanceID
import FirebaseMessaging
import Foundation
import Starscream
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
@_exported import UserSDK
extension UserSDK {
  @available(swift, obsoleted: 0.1)
  @objc dynamic public func ping()
  @available(swift, obsoleted: 0.1)
  @objc dynamic public func sendEvent(name: Swift.String, params: [Swift.String : Any])
  @available(swift, obsoleted: 0.1)
  @objc dynamic public func trackScreen(name: Swift.String)
  @available(swift, obsoleted: 0.1)
  @objc dynamic public func setUserData(_ userData: [Swift.String : Swift.String], completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @available(swift, obsoleted: 0.1)
  @objc dynamic public func setCustomUserData(_ customUserData: [Swift.String : Any], completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @available(swift, obsoleted: 0.1)
  @objc dynamic public func setCustomUserData(_ customUserData: [Swift.String : Any])
  @available(swift, obsoleted: 0.1)
  @objc dynamic public func logout()
}
@objc public class UserSDK : ObjectiveC.NSObject {
  @objc public static var `default`: UserSDK? {
    @objc get
    @objc set
  }
  @objc public static var inAppAlertCloseButtonText: Swift.String
  @objc public var apiKey: Swift.String {
    get
  }
  @objc public var baseURL: Swift.String {
    get
  }
  @objc public var shouldTrackActivities: Swift.Bool {
    get
  }
  @objc public var notificationDelegate: RemoteNotificationDelegate? {
    @objc get
    @objc set
  }
  @objc public var userId: Swift.String? {
    @objc get
  }
  @objc public init(application: UIKit.UIApplication, apiKey: Swift.String, baseURL: Swift.String, shouldTrackActivities: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
extension UserSDK {
  @objc(pingWithCompletion:) dynamic public func ping(_ completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc(sendEventWithName:params:completion:) dynamic public func sendEvent(with name: Swift.String, params: [Swift.String : Any], _ completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  @objc(trackScreenWithName:completion:) dynamic public func trackScreen(with name: Swift.String, _ completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
}
extension UserSDK {
  @objc public enum EventType : Swift.Int {
    case addToCart
    case purchase
    case liking
    case addToObservation
    case order
    case reservation
    case `return`
    case view
    case click
    case detail
    case add
    case remove
    case checkout
    case checkoutOption
    case refund
    case promoClick
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(sendProductEventWithProductId:eventType:name:productURL:params:completion:) dynamic public func sendProductEvent(_ productId: Swift.String, eventType: UserSDK.EventType, name: Swift.String? = nil, productURL: Swift.String? = nil, params: [Swift.String : Any]? = nil, _ completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
}
extension UserSDK {
  @objc(showPreloadContentWithName:completion:) dynamic public func showPreloadContent(_ name: Swift.String, _ completion: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
  @objc(fetchPreloadContentWithName:completion:) dynamic public func fetchPreloadContent(_ name: Swift.String, _ completion: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
}
extension UserSDK {
  public enum UserDataKey : Swift.String {
    case firstName
    case lastName
    case email
    case phone
    case userId
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public func setUserData(_ userData: [UserSDK.UserDataKey : Swift.String?], _ completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  public func setCustomUserData(_ customUserData: [Swift.String : Any?], _ completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
}
extension UserSDK {
  @objc(registerForRemoteNotificationsWithOptions:notificationDelegate:) dynamic public func registerForRemoteNotifications(options: UserNotifications.UNAuthorizationOptions, notificationDelegate: RemoteNotificationDelegate? = nil)
  @objc(handleNotificationWithUserInfo:) dynamic public func handleNotification(userInfo: [Swift.AnyHashable : Any])
}
extension UserSDK {
  @objc(logoutWithCompletion:) dynamic public func logout(_ completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
}
extension UserSDK {
  @objc dynamic public var userDataDictionary: [Swift.String : Any] {
    @objc get
  }
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
  case UnableToGetInitialFlags
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (Reachability) -> ()
  public typealias NetworkUnreachable = (Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: Reachability.NetworkStatus, b: UserSDK.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Connection : Swift.CustomStringConvertible {
    case none, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: Reachability.Connection, b: UserSDK.Reachability.Connection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: Reachability.NetworkReachable?
  public var whenUnreachable: Reachability.NetworkUnreachable?
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: Reachability.Connection {
    get
  }
  public var connection: Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  public var description: Swift.String {
    get
  }
}
extension String {
  public var boolValue: Swift.Bool {
    get
  }
  public var floatValue: Swift.Float {
    get
  }
}
@objc public protocol RemoteNotificationDelegate {
  @objc func didReceiveRemoteNotification(with id: Swift.String, data: [Swift.AnyHashable : Any])
}
public protocol TrackableView {
  var screenName: Swift.String { get }
}
extension UIViewController : TrackableView {
  public var screenName: Swift.String {
    get
  }
  @objc dynamic public func trackScreen()
}
extension UserSDK.EventType : Swift.Equatable {}
extension UserSDK.EventType : Swift.Hashable {}
extension UserSDK.EventType : Swift.RawRepresentable {}
extension UserSDK.UserDataKey : Swift.Equatable {}
extension UserSDK.UserDataKey : Swift.Hashable {}
extension UserSDK.UserDataKey : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension Reachability.NetworkStatus : Swift.Hashable {}
extension Reachability.Connection : Swift.Equatable {}
extension Reachability.Connection : Swift.Hashable {}
